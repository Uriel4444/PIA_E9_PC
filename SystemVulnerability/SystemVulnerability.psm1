# SystemVulnerability.psm1

# Modo estricto
Set-StrictMode -Version Latest

# Función para descargar el NVD Data Feed y descomprimirlo
function NVDFeed {
    param(
        [string]$CVEFeedUrl = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz",
        [string]$DestinationPath = "C:\CVEList.json.gz",
        [string]$DecompressedPath = "C:\CVEList.json"
    )

    try {
        Write-Host "Descargando feed de CVEs desde NVD..." -ForegroundColor Cyan
        Invoke-WebRequest -Uri $CVEFeedUrl -OutFile $DestinationPath

        Write-Host "Descomprimiendo archivo .gz..." -ForegroundColor Cyan
        if (Test-Path $DecompressedPath) {
            Remove-Item $DecompressedPath -Force
        }

        # Usar GzipStream para descomprimir el archivo .gz
        $gzipStream = [System.IO.Compression.GzipStream]::new(
            [System.IO.File]::OpenRead($DestinationPath),
            [System.IO.Compression.CompressionMode]::Decompress
        )
        $decompressedFile = [System.IO.File]::Create($DecompressedPath)
        $buffer = New-Object byte[] 4096
        $bytesRead = 0

        while (($bytesRead = $gzipStream.Read($buffer, 0, $buffer.Length)) -gt 0) {
            $decompressedFile.Write($buffer, 0, $bytesRead)
        }

        $gzipStream.Close()
        $decompressedFile.Close()

        Write-Host "El feed de CVEs se ha descargado y descomprimido correctamente." -ForegroundColor Green

    } catch {
        Write-Host "Error al descargar o descomprimir el feed: $_" -ForegroundColor Red
    }
}

# Función para escanear vulnerabilidades del sistema usando el feed NVD
function Get-SystemVulnerabilities {
    param(
        [string]$CVEListPath = "C:\CVEList.json"
    )

    # Inicialización de la variable de resultado
    $vulnerabilitiesFound = @()

    try {
        # Verificación de actualizaciones de seguridad instaladas en el sistema
        $hotfixes = Get-HotFix
        if (-not $hotfixes) {
            throw "No se pudieron obtener las actualizaciones instaladas. Asegúrate de que tienes los permisos adecuados."
        }

        # Leer el archivo JSON de la lista de CVEs del NVD
        if (-not (Test-Path $CVEListPath)) {
            throw "El archivo de la lista de CVEs no fue encontrado. Asegúrate de que la ruta es correcta."
        }

        $CVEData = Get-Content -Path $CVEListPath | ConvertFrom-Json

        # Comparar las actualizaciones instaladas contra las CVEs en el archivo JSON
        foreach ($hotfix in $hotfixes) {
            foreach ($CVEItem in $CVEData.CVE_Items) {
                if ($hotfix.HotFixID -match $CVEItem.cve.CVE_data_meta.ID) {
                    $vulnerabilitiesFound += [PSCustomObject]@{
                        HotFixID    = $hotfix.HotFixID
                        CVEID       = $CVEItem.cve.CVE_data_meta.ID
                        Description = $CVEItem.cve.description.description_data[0].value
                        Published   = $CVEItem.publishedDate
                        Severity    = $CVEItem.impact.baseMetricV3.cvssV3.baseSeverity
                    }
                }
            }
        }

        if ($vulnerabilitiesFound.Count -eq 0) {
            Write-Host "No se detectaron vulnerabilidades conocidas en las actualizaciones instaladas." -ForegroundColor Green
        } else {
            Write-Host "Vulnerabilidades encontradas:" -ForegroundColor Red
            return $vulnerabilitiesFound
        }

    } catch {
        # Manejo de errores: mostrar el mensaje de la excepción
        Write-Host "Error: $_" -ForegroundColor Yellow
    }
}

# Función para actualizar la lista de CVEs desde el NVD
function CVEList {
    param(
        [string]$CVEListPath = "C:\CVEList.json.gz"
    )

    try {
        # Descargar el feed de NVD y descomprimirlo
        NVDFeed -DestinationPath $CVEListPath

    } catch {
        Write-Host "Error al actualizar la lista de CVEs: $_" -ForegroundColor Yellow
    }
}

# Exportar las funciones
Export-ModuleMember -Function Get-SystemVulnerabilities, CVEList, NVDFeed